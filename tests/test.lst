                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.9.0 #11195 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module test
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _calloc
                             13 	.globl ___assert
                             14 	.globl _printf
                             15 	.globl _putchar
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _DATA
                             23 ;--------------------------------------------------------
                             24 ; ram data
                             25 ;--------------------------------------------------------
                             26 	.area _INITIALIZED
                             27 ;--------------------------------------------------------
                             28 ; absolute external ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DABS (ABS)
                             31 ;--------------------------------------------------------
                             32 ; global & static initialisations
                             33 ;--------------------------------------------------------
                             34 	.area _HOME
                             35 	.area _GSINIT
                             36 	.area _GSFINAL
                             37 	.area _GSINIT
                             38 ;--------------------------------------------------------
                             39 ; Home
                             40 ;--------------------------------------------------------
                             41 	.area _HOME
                             42 	.area _HOME
                             43 ;--------------------------------------------------------
                             44 ; code
                             45 ;--------------------------------------------------------
                             46 	.area _CODE
                             47 ;test.c:5: int putchar(int c) __naked
                             48 ;	---------------------------------
                             49 ; Function putchar
                             50 ; ---------------------------------
   0000                      51 _putchar::
                             52 ;test.c:15: __endasm;
   0000 21 02 00      [10]   53 	ld	hl, #2
   0003 39            [11]   54 	add	hl, sp
   0004 6E            [ 7]   55 	ld	l, (hl)
   0005 3E 01         [ 7]   56 	ld	a, #1
   0007 CF            [11]   57 	rst	0x08
   0008 C9            [10]   58 	ret
                             59 ;test.c:16: }
                             60 ;test.c:40: int main(int argc, char * argv[]) {
                             61 ;	---------------------------------
                             62 ; Function main
                             63 ; ---------------------------------
   0009                      64 _main::
   0009 DD E5         [15]   65 	push	ix
                             66 ;test.c:42: a=calloc(1, sizeof(struct s3));
   000B 21 08 00      [10]   67 	ld	hl, #0x0008
   000E E5            [11]   68 	push	hl
   000F 2E 01         [ 7]   69 	ld	l, #0x01
   0011 E5            [11]   70 	push	hl
   0012 CDr00r00      [17]   71 	call	_calloc
   0015 F1            [10]   72 	pop	af
   0016 F1            [10]   73 	pop	af
                             74 ;test.c:43: a->i=1;
   0017 4D            [ 4]   75 	ld	c,l
   0018 44            [ 4]   76 	ld	b,h
   0019 36 01         [10]   77 	ld	(hl), #0x01
   001B 23            [ 6]   78 	inc	hl
   001C 36 00         [10]   79 	ld	(hl), #0x00
                             80 ;test.c:45: a->t=calloc(1, sizeof(struct s1));
   001E 69            [ 4]   81 	ld	l, c
   001F 60            [ 4]   82 	ld	h, b
   0020 23            [ 6]   83 	inc	hl
   0021 23            [ 6]   84 	inc	hl
   0022 E5            [11]   85 	push	hl
   0023 C5            [11]   86 	push	bc
   0024 11 06 00      [10]   87 	ld	de, #0x0006
   0027 D5            [11]   88 	push	de
   0028 11 01 00      [10]   89 	ld	de, #0x0001
   002B D5            [11]   90 	push	de
   002C CDr00r00      [17]   91 	call	_calloc
   002F F1            [10]   92 	pop	af
   0030 F1            [10]   93 	pop	af
   0031 EB            [ 4]   94 	ex	de,hl
   0032 C1            [10]   95 	pop	bc
   0033 E1            [10]   96 	pop	hl
   0034 73            [ 7]   97 	ld	(hl), e
   0035 23            [ 6]   98 	inc	hl
   0036 72            [ 7]   99 	ld	(hl), d
                            100 ;test.c:47: printf("%d", a->i);
   0037 69            [ 4]  101 	ld	l, c
   0038 60            [ 4]  102 	ld	h, b
   0039 5E            [ 7]  103 	ld	e, (hl)
   003A 23            [ 6]  104 	inc	hl
   003B 56            [ 7]  105 	ld	d, (hl)
   003C C5            [11]  106 	push	bc
   003D D5            [11]  107 	push	de
   003E 21r6Er00      [10]  108 	ld	hl, #___str_0
   0041 E5            [11]  109 	push	hl
   0042 CDr00r00      [17]  110 	call	_printf
   0045 F1            [10]  111 	pop	af
   0046 F1            [10]  112 	pop	af
                            113 ;test.c:48: assert(a->i == 1);
   0047 E1            [10]  114 	pop	hl
   0048 4E            [ 7]  115 	ld	c, (hl)
   0049 23            [ 6]  116 	inc	hl
   004A 46            [ 7]  117 	ld	b, (hl)
   004B 79            [ 4]  118 	ld	a, c
   004C 3D            [ 4]  119 	dec	a
   004D B0            [ 4]  120 	or	a, b
   004E 28 18         [12]  121 	jr	Z,00104$
   0050 21 30 00      [10]  122 	ld	hl, #0x0030
   0053 E5            [11]  123 	push	hl
   0054 21r80r00      [10]  124 	ld	hl, #___str_3
   0057 E5            [11]  125 	push	hl
   0058 21r7Br00      [10]  126 	ld	hl, #___str_2
   005B E5            [11]  127 	push	hl
   005C 21r71r00      [10]  128 	ld	hl, #___str_1
   005F E5            [11]  129 	push	hl
   0060 CDr00r00      [17]  130 	call	___assert
   0063 21 08 00      [10]  131 	ld	hl, #8
   0066 39            [11]  132 	add	hl, sp
   0067 F9            [ 6]  133 	ld	sp, hl
   0068                     134 00104$:
                            135 ;test.c:50: return 0;
   0068 21 00 00      [10]  136 	ld	hl, #0x0000
                            137 ;test.c:51: }
   006B DD E1         [14]  138 	pop	ix
   006D C9            [10]  139 	ret
   006E                     140 ___str_0:
   006E 25 64               141 	.ascii "%d"
   0070 00                  142 	.db 0x00
   0071                     143 ___str_1:
   0071 61 2D 3E 69 20 3D   144 	.ascii "a->i == 1"
        3D 20 31
   007A 00                  145 	.db 0x00
   007B                     146 ___str_2:
   007B 6D 61 69 6E         147 	.ascii "main"
   007F 00                  148 	.db 0x00
   0080                     149 ___str_3:
   0080 74 65 73 74 2E 63   150 	.ascii "test.c"
   0086 00                  151 	.db 0x00
                            152 	.area _CODE
                            153 	.area _INITIALIZER
                            154 	.area _CABS (ABS)
